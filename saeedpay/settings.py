"""
Django settings for saeedpay project.

Generated by "django-admin startproject" using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta
from decouple import config

from celery.schedules import crontab
from corsheaders.defaults import default_headers

try:
    from .local_settings import *
except ImportError:
    from .local_settings_template import *

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# Application definition
DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_admin_listfilter_dropdown",
    "admin_searchable_dropdown",
    "corsheaders",
    "django_celery_beat",
    "import_export",
    "drf_spectacular",
    "django_filters",
    "sweetify",
    "tinymce",
    "lib.cas_auth",
    "lib.erp_base",
]

LOCAL_APPS = [
    "customers",
    "profiles",
    "auth_api",
    "wallets",
    "merchants",
    "store",
    "chatbot",
    "banking",
    "tickets",
    "credit",
    "blogs",
    "contact",
    "kyc",
]

INSTALLED_APPS = DEFAULT_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "lib.cas_auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "admin_reorder.middleware.ModelAdminReorder",
]

ROOT_URLCONF = "saeedpay.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "lib.cas_auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "saeedpay.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# Card Validator Configuration
CARD_VALIDATOR_MOCK = True  # Set to False for production validation

# KYC Configuration
KYC_IDENTITY_BASE_URL = config(
    "KYC_IDENTITY_BASE_URL", default="https://sandbox.vidaverify.ir:9091"
)
KYC_IDENTITY_TIMEOUT = config("KYC_IDENTITY_TIMEOUT", default=30, cast=int)
KYC_IDENTITY_TOKEN_SKEW_SECONDS = config(
    "KYC_IDENTITY_TOKEN_SKEW_SECONDS", default=30, cast=int
)

# KYC Retry Configuration
KYC_VIDEO_SUBMIT_MAX_RETRIES = config(
    "KYC_VIDEO_SUBMIT_MAX_RETRIES", default=3, cast=int
)
KYC_VIDEO_SUBMIT_RETRY_DELAY = config(
    "KYC_VIDEO_SUBMIT_RETRY_DELAY", default=60, cast=int
)
KYC_VIDEO_CHECK_MAX_RETRIES = config(
    "KYC_VIDEO_CHECK_MAX_RETRIES", default=6, cast=int
)
KYC_VIDEO_CHECK_RETRY_DELAY = config(
    "KYC_VIDEO_CHECK_RETRY_DELAY", default=120, cast=int
)
KYC_SHAHKAR_MAX_RETRIES = config(
    "KYC_SHAHKAR_MAX_RETRIES", default=3, cast=int
)
KYC_SHAHKAR_RETRY_DELAY = config(
    "KYC_SHAHKAR_RETRY_DELAY", default=60, cast=int
)
CREDIT_DEFAULT_APPROVED_LIMIT = config(
    "CREDIT_DEFAULT_APPROVED_LIMIT", default=5000000, cast=int
)

# KYC Identity Service Credentials
KIAHOOSHAN_USERNAME = config("KIAHOOSHAN_USERNAME", default="")
KIAHOOSHAN_PASSWORD = config("KIAHOOSHAN_PASSWORD", default="")
KIAHOOSHAN_ORGNAME = config("KIAHOOSHAN_ORGNAME", default="")
KIAHOOSHAN_ORGNATIONALCODE = config("KIAHOOSHAN_ORGNATIONALCODE", default="")

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "lib.erp_base.validators.UppercaseValidator",
    },
    {
        "NAME": "lib.erp_base.validators.LowercaseValidator",
    },
    {
        "NAME": "lib.erp_base.validators.HasNumberValidator",
    },
    {
        "NAME": "lib.erp_base.validators.SymbolValidator",
    },
    {
        "NAME": "lib.erp_base.validators.LengthValidator",
        "OPTIONS": {"min_length": 8}
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Tehran"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/saeedpay/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_URL = "/saeedpay/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "lib.cas_auth.authentication.PublicAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "lib.erp_base.utils.pagination.StandardPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        # ── Coarse limits ───────────────────────────────────────────────────────
        "anon": "100/hour",
        "user": "1000/hour",

        # ── Auth ───────────────────────────────────────────────────────────────
        "auth-login": "20/hour",
        "auth-logout": "60/hour",
        "auth-refresh": "120/hour",
        "auth-register": "10/hour",
        "auth-change-password": "30/hour",
        "auth-reset-password": "10/hour",
        "auth-otp": "60/hour",
        "otp-by-phone": "5/hour",

        # ── Blogs / Comments ───────────────────────────────────────────────────
        "comments": "300/hour",
        "comment-create": "60/hour",
        "comment-like": "60/minute",

        # ── Banking / Cards ────────────────────────────────────────────────────
        "bank-cards-read": "300/hour",
        "bank-cards-write": "30/minute",

        # ── Credit (Statements) ────────────────────────────────────────────────
        "credit-statements-read": "300/hour",
        "credit-statement-lines-read": "600/hour",

        # ── Wallets / Payment Requests ─────────────────────────────────────────
        # list/search/detail of payment requests (user-facing)
        "payment-requests-read": "300/hour",
        # create/cancel (if applicable) by user
        "payment-requests-write": "30/minute",
        # confirm action (stronger limit)
        "payment-confirm": "10/minute",

        # ── Wallets / Balances & History ───────────────────────────────────────
        "wallets-read": "300/hour",  # balances, summary, etc.

        # ── Wallets / Credit ───────────────────────────────────────────────────
        "credit-limits-read": "300/hour",

        # ── Wallets / Installments ─────────────────────────────────────────────
        "installments-read": "300/hour",  # user installment list/detail
        "installment-plans-read": "300/hour",  # available plans
        "installments-apply": "30/hour",  # create/apply for installment

        # ── Wallets / Wallet Transfers ─────────────────────────────────────────
        "wallet-transfers-read": "300/hour",
        "wallet-transfers-write": "60/minute",

        # ── Partner (Store API Key) ────────────────────────────────────────────
        "partner-payment-read": "600/hour",  # check status, fetch request
        "partner-payment-write": "60/minute",  # create/confirm/callback
        "store-apikey-regen": "5/hour",

        # ── Store (Backoffice) ─────────────────────────────────────────────────
        "stores-read": "200/hour",
        "stores-write": "30/hour",
        "public-stores-read": "500/hour",
        "store-contract-read": "100/hour",
        "store-contract-write": "20/hour",

        # ── Chatbot ────────────────────────────────────────────────────────────
        "chat-sessions": "300/hour",
        "chat-start": "20/hour",
        "chat-talk": "60/minute",
        "chat-messages": "300/hour",

        # ── Contact / Tickets ─────────────────────────────────────────────────
        "contact-create": "10/hour",
        "tickets-read": "300/hour",
        "tickets-write": "30/hour",
        "ticket-message-add": "60/hour",
        "ticket-categories-read": "500/hour",
    },
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=24),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}
REFRESH_COOKIE_NAME = "sp_refresh"
REFRESH_COOKIE_PATH = "/"
REFRESH_COOKIE_SECURE = True
REFRESH_COOKIE_HTTPONLY = True
REFRESH_COOKIE_SAMESITE = "Strict"

MAX_SESSION_LIFETIME = timedelta(hours=24)

CORS_ALLOW_HEADERS = list(default_headers) + [
    "cas-authorization",
]

SERVICE_NAME = "SAEEDPAY"
SERVICE_NAME_FA = "سعید پی"
AUTH_USER_MODEL = "cas_auth.User"

AUTHENTICATION_BACKENDS = ["lib.cas_auth.backend.CASBackend"]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 1024 * 8


def spectacular_preprocess_hook(endpoints):
    from drf_spectacular.openapi import AutoSchema

    def is_compatible(view):
        try:
            return isinstance(getattr(view.cls, "schema", None), AutoSchema)
        except Exception:
            return False

    return [
        (path, path_regex, method, callback)
        for (path, path_regex, method, callback) in endpoints
        if is_compatible(callback)
    ]


SPECTACULAR_SETTINGS = {
    "TITLE": "SaeedPay API",
    "DESCRIPTION": "مستندات احراز هویت کاربران (مشتری، فروشگاه)",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SECURITY": [{"PublicAuth": []}],
    "COMPONENT_SPLIT_REQUEST": True,
    "COMPONENTS": {
        "securitySchemes": {
            "PublicAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
            }
        }
    },
    "PREPROCESSING_HOOKS": ["saeedpay.settings.spectacular_preprocess_hook"],
}

# Redis
REDIS_HOST = "localhost"
REDIS_PORT = 6379

REDIS_BROKER_DB = config("REDIS_BROKER_DB", default=0, cast=int)
REDIS_BACKEND_DB = config("REDIS_BACKEND_DB", default=1, cast=int)


def _redis_url(db: int) -> str:
    pwd = f":{REDIS_PASSWORD}@" if REDIS_PASSWORD else ""
    return f"redis://{pwd}{REDIS_HOST}:{REDIS_PORT}/{db}"


# Celery
CELERY_BROKER_URL = _redis_url(REDIS_BROKER_DB)
CELERY_RESULT_BACKEND = _redis_url(REDIS_BACKEND_DB)

CELERY_TIMEZONE = "Asia/Tehran"
CELERY_ENABLE_UTC = True
CELERY_TASK_DEFAULT_QUEUE = "saeedpay"

CELERY_TASK_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_RESULT_SERIALIZER = "json"

CELERY_TASK_ROUTES = {
    "credit.tasks.statement_tasks.*": {"queue": "statements"},
    "credit.tasks.credit_tasks.*": {"queue": "credit"},
}

CELERY_BEAT_SCHEDULE = {
    # wallet
    "expire-pending-payment-requests-every-minute": {
        "task": "wallets.tasks.task_expire_pending_payment_requests",
        "schedule": crontab(minute="*/1"),
    },
    "cleanup-cancelled-and-expired-requests-every-hour": {
        "task": "wallets.tasks.task_cleanup_cancelled_and_expired_requests",
        "schedule": crontab(minute=0, hour="*/1"),
    },
    "expire-pending-transfer-every-minute": {
        "task": "wallets.tasks.task_expire_pending_transfer_requests",
        "schedule": crontab(minute="*/1"),
    },
    # banking
    "reenqueue-stale-pending-cards-every-minute": {
        "task": "banking.tasks.reenqueue_stale_pending_cards",
        "schedule": crontab(minute="*/1"),
        "kwargs": {"limit": 200, "older_than_minutes": 1},
    },
    # credit
    # Credit: safe daily run; idempotent—only acts when month has rolled over
    "credit-month-end-rollover-daily-0010": {
        "task": "credit.tasks.task_month_end_rollover",
        "schedule": crontab(minute=10, hour=0),
    },
    # Credit: finalize due windows hourly
    "credit-finalize-due-windows-hourly-0015": {
        "task": "credit.tasks.task_finalize_due_windows",
        "schedule": crontab(minute=15, hour="*"),
    },
    # profile
    "rehydrate-shahkar-checks-every-15m": {
        "task": "profiles.tasks.rehydrate_shahkar_checks",
        "schedule": 15 * 60,  # seconds
    },
}

# reCAPTCHA Configuration
RECAPTCHA_SECRET_KEY = config(
    'RECAPTCHA_SECRET_KEY', default='6LfseasrAAAAAPFD-ZLZPLOco46yvgickFkRR-gs'
)
RECAPTCHA_V3 = False  # Set to False for reCAPTCHA v2
RECAPTCHA_V3_THRESHOLD = 0.5  # Score threshold for v3 (ignored when v2)
RECAPTCHA_ACTION = "submit"  # Default action name for v3 (ignored when v2)
